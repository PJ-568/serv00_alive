#!/bin/bash

# 默认配置
DEFAULT_SERVERS_FILE="$HOME/.serv00_alive_servers"

# 显示帮助信息
show_help() {
  echo "用法: serv00_alive [选项]"
  echo
  echo "选项:"
  echo "  -h, --help     显示此帮助信息"
  echo "  -f, --file FILE"
  echo "                 指定包含服务器列表的文件（默认: $DEFAULT_SERVERS_FILE）"
  echo
  echo "服务器文件格式:"
  echo "  每行一个服务器，格式为 username@hostname:password"
  echo " 例如:"
  echo "    user1@sX.serv00.com:password1"
  echo "    user2@sX.serv00.com:password2"
  echo
  echo "注意:"
  echo " - 需要安装 sshpass 工具"
  echo "  - 请确保服务器文件权限设置正确以保护密码安全"
}

# 解析命令行参数
parse_args() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|--help)
        show_help
        exit 0
        ;;
      -f|--file)
        SERVERS_FILE="$2"
        shift 2
        ;;
      *)
        echo "未知选项: $1"
        show_help
        exit 1
        ;;
    esac
  done
}

# 读取服务器列表
read_servers() {
  local file="$1"
  if [[ ! -f "$file" ]]; then
    echo "错误: 服务器文件 '$file' 不存在"
    exit 1
  fi
  
  # 读取服务器列表到数组
  mapfile -t servers < "$file"
  
  # 检查是否有服务器
  if [[ ${#servers[@]} -eq 0 ]]; then
    echo "错误: 服务器文件 '$file' 中没有服务器"
    exit 1
  fi
}

# 保活单个服务器连接
keep_alive() {
  local server_entry="$1"
  
  # 分离用户名、主机名和密码
  local user_and_host="${server_entry%:*}"
  local password="${server_entry#*:}"
  local user="${user_and_host%@*}"
  local server="${user_and_host#*@}"
  
  # 执行SSH连接测试
  echo "正在测试连接到 $user@$server..."
  timeout 30 sshpass -p "$password" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt "$user@$server" "echo \"Hello from $user\"; date; sleep 3"
  local result=$?
  
  # 处理结果
  if [ $result -eq 124 ]; then
    echo "错误：$user@$server 连接超时"
    # 这里可以添加发送通知的代码
    # message="Serv00 保活 SSH 连接超时！"
  elif [ $result -ne 0 ]; then
    echo "错误：$user@$server 连接失败"
    # message="Serv00 保活 SSH 连接失败！"
  else
    echo "$user@$server 连接成功！"
    # message="Serv00 保活 SSH 连接成功！"
  fi
  
  echo "----------------------------------------"
}

# 主函数
main() {
  # 默认值
  SERVERS_FILE="${DEFAULT_SERVERS_FILE}"
  
  # 解析命令行参数
  parse_args "$@"
  
  # 读取服务器列表
  read_servers "$SERVERS_FILE"
  
  # 对每个服务器执行保活操作
  for server in "${servers[@]}"; do
    # 跳过空行和注释行
    if [[ -n "$server" ]] && [[ ! "$server" =~ ^[[:space:]]*# ]]; then
      keep_alive "$server"
    fi
  done
}

# 执行主函数
main "$@"
